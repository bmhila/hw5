import pathlib
import pandas as pd
import numpy as np
from typing import Union
import json
import matplotlib.pyplot as plt


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        self.data_fname = data_fname 
        self.data = pd.DataFrame()
        #self.uniques = []  
        #self.duplicates = {} 
        #self.listall = []

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        with open(self.data_fname) as f:
            self.data = pd.DataFrame(json.load(f))

    def show_age_distrib(self):#-> tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
        Number of people in a given bin
        bins : np.ndarray
        Bin edges
        """
        QuestionnaireAnalysis.read_data(self)
        series_age = pd.Series(self.data['age'].values) 
        series_age = pd.to_numeric(series_age.astype(str).str[:3], errors='coerce')
        series_age = series_age.dropna()
        bins = np.linspace(0, 100, 10)
        age_dis = (plt.hist(series_age, bins))
        plt.show()
        print(self.data)
        return(age_dis)

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
        A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
        the (ordinal) index after a reset.
        """
        QuestionnaireAnalysis.read_data(self)
        #validcode = (self.data['email'].str.contains('@')) & (self.data['email'].str.contains('.'))
        #regex = '^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'
        #self.data.query((self.data['email'].str.contains('@')) & (self.data['email'].str.contains('.')))
        #print(self.data[~(self.data['email'].str.contains("@")) | ~(self.data['email'].str.contains("."))])
        self.data.drop(self.data[~(self.data['email'].str.contains("@")) | ~(self.data['email'].str.contains("."))] , inplace=True)
        print(self.data)
        

if __name__ == "__main__":
    myfile = QuestionnaireAnalysis('C:/Dev/hw5/data.json')
    #myfile.read_data()
    #myfile.show_age_distrib()
    myfile.remove_rows_without_mail()